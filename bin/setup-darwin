#!/usr/bin/env bash

if [[ "$(uname)" != "Darwin" ]]; then
  echo "Cannot run on platform other than OSX"
  exit 1
fi

set -e

resolve_link() {
  $(type -p greadlink readlink | head -1) "$1"
}

abs_dirname() {
  local cwd="$(pwd)"
  local path="$1"

  while [ -n "$path" ]; do
    cd "${path%/*}"
    local name="${path##*/}"
    path="$(resolve_link "$name" || true)"
  done

  pwd
  cd "$cwd"
}

DEFAULT_SHELL=`which zsh`
HOST_NAME="$USER.dev"
BONJOUR_NAME="$USER-mac"

sudo -v

CURRENT_SHELL="$(dscl . -read /Users/$USER UserShell | cut -d " " -f 2)"
if test "$CURRENT_SHELL" != $DEFAULT_SHELL; then
  echo "Changing default shell to $DEFAULT_SHELL..."
  sudo chsh -s "$DEFAULT_SHELL" "$USER"
fi

if test "$(sudo scutil --get ComputerName)" != "$HOST_NAME"; then
  echo "Setting computer name to $HOST_NAME..."
  sudo scutil --set ComputerName "$HOST_NAME"
  sudo scutil --set HostName "$HOST_NAME"
fi

if test "$(sudo scutil --get LocalHostName)" != "$BONJOUR_NAME"; then
  echo "Setting bonjour host name to $BONJOUR_NAME..."
  sudo scutil --set LocalHostName "$BONJOUR_NAME"
fi

echo Expand save panel by default
defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

echo Expand print panel by default
defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true

echo Automatically quit printer app once the print jobs complete
defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true

echo Disable the “Are you sure you want to open this application?” dialog
defaults write com.apple.LaunchServices LSQuarantine -bool false

echo Trackpad: enable tap to click for this user and for the login screen
defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

echo Enable full keyboard access for all controls
defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

echo Use scroll gesture with the Ctrl modifier key to zoom
echo Follow the keyboard focus while zoomed in

echo Locale settings
defaults write NSGlobalDomain AppleLanguages -array "en" "pl"
defaults write NSGlobalDomain AppleLocale -string "en_GB@currency=PLN"
defaults write NSGlobalDomain AppleMeasurementUnits -string "Centimeters"
defaults write NSGlobalDomain AppleMetricUnits -bool true

echo Disable shadow in screenshots
defaults write com.apple.screencapture disable-shadow -bool true

echo Finder: show all filename extensions
defaults write NSGlobalDomain AppleShowAllExtensions -bool true

echo Finder: show status bar
defaults write com.apple.finder ShowStatusBar -bool true

echo Finder: show path bar
defaults write com.apple.finder ShowPathBar -bool true

echo Display full POSIX path as Finder window title
defaults write com.apple.finder _FXShowPosixPathInTitle -bool true

echo When performing a search, search the current folder by default
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

echo Disable the warning when changing a file extension
defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false

echo Avoid creating .DS_Store files on network volumes
defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

echo Disable disk image verification
defaults write com.apple.frameworks.diskimages skip-verify -bool true
defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true
defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true

echo Automatically open a new Finder window when a volume is mounted
defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true
defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true
defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true

echo Use list view in all Finder windows by default
echo Four-letter codes for the other view modes: icnv, clmv, Flwv
defaults write com.apple.finder FXPreferredViewStyle -string "Nlsv"

echo Disable the warning before emptying the Trash
defaults write com.apple.finder WarnOnEmptyTrash -bool false

echo Show the ~/Library folder
chflags nohidden ~/Library

echo Put Dock on the left
defaults write com.apple.dock orientation -string left

echo Minimize to app icon
defaults write com.apple.dock minimize-to-application -bool true

echo Restarting Finder
killall Finder

# Homebrew
if !(which brew > /dev/null); then
  echo 'Installing brew...'
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

echo Installing applications...

autostart_hidden() {
  osascript -e "tell application \"System Events\" to make login item at end with properties {path:\"/Applications/$1.app\", hidden:true}"
}

run_app() {
  if test "$(osascript -e "tell application \"System Events\" to (name of processes) contains \"$1\"")" = "false"; then
    open -a "$1"
  fi
}

clear_dock() {
  defaults write com.apple.dock persistent-apps -array ''
}

permament_dock() {
  defaults write com.apple.dock persistent-apps -array-add "<dict><key>tile-data</key><dict><key>file-data</key><dict><key>_CFURLString</key><string>$1</string><key>_CFURLStringType</key><integer>0</integer></dict></dict></dict>"
}

allow_control() {
  APP_ID="$(osascript -e "id of app \"$1\"")"

  if [[ -n "$APP_ID" ]]; then
    sudo sqlite3 /Library/Application\ Support/com.apple.TCC/TCC.db "INSERT or REPLACE INTO access values ('kTCCServiceAccessibility', '$APP_ID', 0, 1, 0, NULL);"
  fi
}

echo "Switching option and command keys..."
osascript -e 'tell application "System Preferences"
    reveal anchor "keyboardTab" of pane "com.apple.preference.keyboard"
end tell
tell application "System Events" to tell window 1 of process "System Preferences"
    click button 1 of tab group 1
    tell sheet 1
        click pop up button 1
        click menu item 3 of menu 1 of pop up button 1

        click pop up button 2
        click menu item 4 of menu 1 of pop up button 2

        click button "OK"
    end tell
end tell
tell application "System Events"
    tell application "System Preferences"
        reveal anchor "keyboardTab" of pane "com.apple.preference.keyboard"
    end tell
    set theCheckbox to checkbox 1 of tab group 1 of window 1 of application process "System Preferences"
    tell theCheckbox
        if not (its value as boolean) then click theCheckbox
    end tell
end tell
quit application "System Preferences"'

# Disable dashboard to free F12 shortcut
defaults write com.apple.dashboard mcx-disabled -boolean true

clear_dock

permament_dock "/Applications/App Store.app"
